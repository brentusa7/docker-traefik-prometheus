version: '3.7'

services:
  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - proxy-main
      - inbound
    deploy:
      labels:
       - "traefik.enable=true" # Enable Traefik, because we disabled expose a service by default
       - "traefik.http.routers.prometheus.rule=Host(`ts-lnx-dock01`)"
       - "traefik.http.routers.prometheus.service=prometheus"
       - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
      #  - "traefik.http.routers.prometheus.tls.certresolver=le" # the router 't' will use TLS certresolver called LE
       - "traefik.http.routers.prometheus.entrypoints=web"
       - "traefik.docker.network=proxy-main"
      placement:
        constraints:
        - node.role==manager
        - node.Labels.traefik == true
      restart_policy:
        condition: on-failure
  
  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    ports:
      - "3000:3000"
    networks:
      - proxy-main
      - inbound
    user: "104"
    deploy:
      labels:
        - "traefik.enable=true" # Enable Traefik, because we disabled expose a service by default
        - "traefik.http.routers.grafana.rule=Host(`elastic.talksuresa.co.za`)"
        - "traefik.http.routers.grafana.service=grafana"
        - "traefik.http.routers.grafana.entrypoints=websecure"
        - "traefik.http.routers.middlewares=https-redirect"
        - "traefik.http.routers.middlewares=security-headers"
        - "traefik.http.routers.grafana.tls.certresolver=le" # the router 't' will use TLS certresolver called LE
        - "traefik.http.services.grafana.loadbalancer.server.port=3000"
        - "traefik.docker.network=proxy-main"
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure

  cadvisor:
    image: google/cadvisor
    networks:
      - proxy-main
      - inbound
    # privileged: true
    command: 
      -logtostderr -docker_only
    ports:
      - "8081:8081"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M      
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.cadvisor.rule=Host(`ts-lnx-dock02`)"
        - "traefik.http.routers.cadvisor.service=cadvisor"
        - "traefik.http.services.cadvisor.loadbalancer.server.port=8081"
        # - "traefik.http.routers.cadvisor.tls.certresolver=leresolver"
        - "traefik.http.routers.cadvisor.entrypoints=web"
    # command: >
    #   --port=8081

networks:
  proxy-main:
    external: true
    # name: proxy-main
  inbound:
    external: false
    name: inbound

volumes:
    prometheus_data: {}
    grafana_data: {}